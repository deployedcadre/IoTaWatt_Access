#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2024 by Brendt Wohlberg
# All rights reserved. GPL v2 License.

# Plot one day of logged data from an IotaWatt device.


import argparse
import datetime as dt
import os
import sys
from time import strftime

import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import numpy as np
from dateutil.parser import ParserError, parse
from dateutil.tz import tzlocal
from requests.exceptions import ConnectionError

from iotawatt_access import (
    IotaWattAPI,
    IotaWattData,
    data_path,
    device_login,
    timestamp_to_datetime,
)


def date_from_day_arg(dayarg):
    errstr = "Day argument must be a negative integer or ISO date."
    try:
        delta = int(dayarg)
    except ValueError:
        try:
            datetime = parse(dayarg)
            date = dt.date(datetime.year, datetime.month, datetime.day)
        except ParserError:
            raise ValueError(errstr)
    else:
        if delta > -1:
            raise ValueError(errstr)
        date = dt.date.today() + dt.timedelta(days=delta)

    return date


if __name__ == "__main__":
    # Parse command line arguments.
    argprs = argparse.ArgumentParser(
        prog="iotawatt_plot",
        description="""Plot one day of logged data from an IotaWatt device.
        Data for the specified day is plotted from saved data if found in
        the directory determined by environment varable IOTAWATT_DATA_PATH
        (defaulting to "~/IotaWatt_Data" if not set), and otherwise
        downloaded from the device. The device URL is determined by
        environment varable IOTAWATT_URL if set, with a default value of
        "http://iotawatt.local". Device username and password are
        determined by environment varables IOTAWATT_USERNAME and
        IOTAWATT_PASSWORD respectively, with default values of "admin"
        and None respectively.""",
    )
    argprs.add_argument(
        "-d",
        "--day",
        nargs=1,
        default=["-1"],
        help="day represented as negative integer (offset from current day) or ISO date.",
    )
    argprs.add_argument(
        "-c",
        "--chan",
        nargs=1,
        default=None,
        help="""comma separated list of channel numbers, with 0 corresponding
        to the first power input.""",
    )
    args = argprs.parse_args()

    # Parse day argument and exit with an error if parsing fails
    try:
        day = date_from_day_arg(args.day[0])
    except ValueError as e:
        print(e.args[0])
        sys.exit(1)

    # Parse channels argument and exit with an error if parsing fails
    if args.chan is None:
        chnnum = None
    else:
        try:
            chnnum = sorted(map(int, args.chan[0].split(",")))
        except ValueError:
            print(f"Could not parse channel number list {args.chan}")
            sys.exit(2)

    # Get data path and exit with an error if path does not exist
    dpath = data_path()
    if not os.path.isdir(dpath):
        print(f"{dpath} does not exist or is not a directory.")
        sys.exit(3)

    # Path to data for selected day
    data_filename = os.path.join(dpath, f"iotawatt_{day.strftime('%Y-%m-%d')}.npz")

    if os.path.isfile(data_filename):  # Load data file if it exists
        print(f"Loading saved data for {day.strftime('%Y-%m-%d')}")
        iwd = IotaWattData.load(data_filename)
    else:  # Otherwise download the data from the device
        # Initialize connection to device
        url, user, pwd = device_login()
        try:
            iw = IotaWattAPI(url=url, user=user, pwd=pwd)
        except ConnectionError as e:
            print(f"Error connecting to {url} using password {pwd}")
            sys.exit(4)

        # Get start and end times for "current" logs as datetime objects
        stdl = iw.get_status("datalogs")
        curr = [l for l in stdl if l["id"] == "Current"][0]
        begin = timestamp_to_datetime(curr["firstkey"])
        end = timestamp_to_datetime(curr["lastkey"])

        # Construct datetime objects representing start and end of selected day
        daystart = dt.datetime(day.year, day.month, day.day).replace(tzinfo=tzlocal())
        dayend = (daystart + dt.timedelta(hours=23, minutes=59, seconds=59)).replace(
            tzinfo=tzlocal()
        )

        # Print error and exit if selected day does not fall entirely within log range
        if daystart < begin or dayend > end:
            print("Full logs for date {day} not within device log date range")
            sys.exit(5)

        # Construct string representations of start and end date/time of selected day
        tz = strftime("%z")
        t0 = str(day) + "T00:00:00" + tz
        t1 = str(day) + "T23:59:59" + tz

        # Define callback function indicating download progress
        def callback(*arg):
            print(".", end="", flush=True)

        # Retrieve and save data for selected day
        print(f"Downloading data for {day.strftime('%Y-%m-%d')} from {url}")
        iwd = iw.get_channel_data(t0, t1, callback=callback)
        print()
        iwd.save(data_filename)

    # Set default channel list if not specified and ensure channel numbers
    # are within range
    if chnnum is None:
        chnnum = list(range(len(iwd.ichannels)))
    if max(chnnum) >= len(iwd.ichannels):
        print("At least one channel number is out of range.")
        sys.exit(5)

    # Construct list of names of selected channels and array of corresponding data
    chnname = []
    chndata = []
    for n in chnnum:
        c = iwd.ichannels[n]
        chnname.append(c)
        chndata.append(iwd.get_channel_data(c, "watts"))
    chndata = np.stack(chndata)

    # Construct array of time objects for data sample times
    smptim = np.array([timestamp_to_datetime(ts, utc=False) for ts in iwd.time])

    # Lowpass filter channel data and subsample it and the sample time array
    flt = np.ones((12,), dtype=np.float32) / 12.0
    fltdata = np.zeros(chndata.shape)
    for n in range(chndata.shape[0]):
        fltdata[n] = np.convolve(chndata[n], flt, mode="same")
    fltdata = fltdata[:, ::12]
    smptim = smptim[::12]

    # Plot selected channels
    fig, ax = plt.subplots(figsize=(16, 10))
    ax.plot(smptim, fltdata.T)
    fig.autofmt_xdate()
    ax.legend(chnname)
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M", tz=tzlocal()))
    ax.set_xlabel("Time")
    ax.set_ylabel("Power (Watts)")
    ax.set_title(f"Power usage for {day}")
    plt.show(block=False)

    print("Enter to close")
    input()
